Plug 'easymotion/vim-easymotion'
Plug 'tpope/vim-commentary'
Plug 'terryma/vim-multiple-cursors'

set scrolloff=10
set number relativenumber
set showmode
set showcmd
set visualbell
set clipboard+=unnamed
set ignorecase
set smartcase
set incsearch
set hlsearch
let mapleader = " "
set surround
set highlightedyank
set sneak
set nerdtree
set easymotion
set which-key
set notimeout
set ideajoin
set quickscope

" Normal mode with jk
inoremap jk <Esc>

" Jump between methods
nnoremap [[ :action MethodUp<CR>
nnoremap ]] :action MethodDown<CR>

" Easy visual indentation
vnoremap < <gv
vnoremap > >gv
" Popup navigation
map <c-j> <Action>(PopupMenu-selectnext)
map <c-k> <Action>(PopupMenu-selectprev)


" Comment lines
map <leader>c <action>(CommentByLineComment)
" Jump around with easymotion
map <leader>j <Plug>(easymotion-s)
" Open NERDTree (use q to exit)
map <leader>x :NERDTreeToggle<CR>
" Folding
map <leader>zc :action CollapseAllRegions<CR>
map <leader>zo :action ExpandAllRegions<CR>
" Window splits
map <leader>w| <Action>(SplitVertically)
map <leader>w- <Action>(SplitHorizontally)
map <leader>wu <Action>(Unsplit)
map <leader>wm <Action>(MoveEditorToOppositeTabGroup)
" Display options
map <leader>dd <action>(ToggleDistractionFreeMode)
map <leader>dz <action>(ToggleZenMode)
map <leader>df <action>(ToggleFullScreen)
" Actions
map <leader>am <action>(ShowIntentionActions)
map <leader>as <action>(SearchEverywhere)
" File navigation
map <leader>ff <action>(GotoFile)
map <leader>fr <action>(RecentFiles)
map <leader>fc <action>(FindInPath)
map <leader><leader> <Action>(RecentFiles)
map <leader>fl <action>(RecentLocations)
map <leader>fs <action>(NewScratchFile)
" Close active tab
map <leader>q <action>(CloseContent)
map <leader>Q <action>(ReopenClosedTab)
" Refactoring
map <leader>rn <Action>(RenameElement)
map <leader>rm <Action>(ExtractMethod)
map <leader>rv <Action>(IntroduceVariable)
map <leader>rf <Action>(IntroduceField)
map <leader>rs <Action>(ChangeSignature)
map <leader>rr <Action>(Refactorings.QuickListPopupAction)
" Go to code
nmap <leader>gd <Action>(GotoDeclaration)
nmap <leader>gy <Action>(GotoTypeDeclaration)
nmap <leader>gi <Action>(GotoImplementation)
nmap <leader>gu <Action>(ShowUsages)
nmap <leader>gt <Action>(GotoTest)
nmap <leader>gf <Action>(Back)
nmap <leader>gb <Action>(Forward)
" Git windows
map <leader>gc <Action>(CheckinProject)
map <leader>gs <Action>(ActivateVersionControlToolWindow)
map <leader>gb <Action>(Git.Branches)

" show a few lines of conteXt around the cursor. note that this makes the
" text scroll if you mouse-click near the start or end of the window.
let g:WhichKey_ShowVimActions = "true"

let g:WhichKeyDesc_display = "<leader>d Display options"

let g:WhichKeyDesc_zen_mode = "<leader>dz Toggle Zen mode"
let g:WhichKeyDesc_df_mode = "<leader>dd Toggle Distraction-Free mode"
let g:WhichKeyDesc_fullscreen = "<leader>df Toggle full screen"
let g:WhichKey_ShowVimActions = "true"
let g:WhichKey_ShowTypedSequence = "false"

map <leader>e <Action>(SearchEverywhere)
map <leader>E <Action>(Switcher)
" built-in navigation to navigated items works better
nnoremap <c-o> :action Back<cr>
nnoremap <c-i> :action Forward<cr>
" but preserve ideavim defaults
nnoremap g<c-o> <c-o>
nnoremap g<c-i> <c-i>
" built in search looks better
map <leader>/ <Action>(Find)
" Searching
let g:WhichKeyDesc_search = "<leader>s Search"
map <leader>sa <Action>(SearchAction)
let g:WhichKeyDesc_search = "<leader>sa Everywhere"
map <leader>se <Action>(SearchEverywhere)
let g:WhichKeyDesc_search = "<leader>sa Everywhere"
map <leader>sr <Action>(RecentFiles)
map <leader>sc <Action>(GotoClass)
map <leader>sf <Action>(GotoFile)
map <leader>ss <Action>(GotoSymbol)
map <leader>sa <Action>(GotoAction)
map <leader>st <Action>(FindInPath)
map <leader>su <Action>(FindUsages)
map <leader>sp <Action>(RecentProjectListGroup)
map <leader>sR <Action>(ReplaceInPath)
""" Language
let g:WhichKeyDesc_language = "<leader>l Language"
map <leader>lm <Action>(Refactorings.QuickListPopupAction)
let g:WhichKeyDesc_language_menu = "<leader>lm Menu"
map <leader>lr <Action>(RenameElement)
let g:WhichKeyDesc_language_rename = "<leader>lr Rename"
map <leader>lc <Action>(ChangeSignature)
let g:WhichKeyDesc_language_change_signature = "<leader>lc Change Signature"
map <leader>lv <Action>(IntroduceVariable)
let g:WhichKeyDesc_language_introduce_variable = "<leader>lv Introduce Variable"
map <leader>li <Action>(Inline)
let g:WhichKeyDesc_language_inline = "<leader>li Inline"
map <leader>lf <Action>(ReformatCode)
let g:WhichKeyDesc_language_reformat = "<leader>lf Format"
""" Debugging
let g:WhichKeyDesc_debugging = "<leader>d Debugging"
map <leader>dt <Action>(ToggleLineBreakpoint)
let g:WhichKeyDesc_debugging_toggle_breakpoint = "<leader>dt Toggle Break Point"
map <leader>ds <Action>(PhpListenDebugAction)
let g:WhichKeyDesc_debugging_listen = "<leader>ds Start Listening"
map <leader>do <Action>(StepOver)
let g:WhichKeyDesc_debugging_step_over = "<leader>do Step Over"
map <leader>di <Action>(StepInto)
let g:WhichKeyDesc_debugging_step_into = "<leader>di Step Into"
map <leader>dr <Action>(EvaluateExpression)
let g:WhichKeyDesc_debugging_repl = "<leader>dr Repl (Evaluate)"
map <leader>dC <Action>(RunToCursor)
let g:WhichKeyDesc_debugging_run_to_cursor = "<leader>dC Run To Cursor"
map <leader>dc <Action>(Resume)
let g:WhichKeyDesc_debugging_resume = "<leader>dc Resume"

" Git
let g:WhichKeyDesc_git = "<leader>g Git"
map <leader>gg <Action>(CheckinProject)
let g:WhichKeyDesc_git_checkin = "<leader>gg Checkin"
map <leader>gc <Action>(Git.Branches)
let g:WhichKeyDesc_git_branches = "<leader>gc Branches"
map <leader>gp <Action>(Git.Commit.And.Push.Executor)
let g:WhichKeyDesc_git_commit_and_push = "<leader>gp Commit & Push"
map <leader>gP <Action>(Vcs.Push)
let g:WhichKeyDesc_git_push = "<leader>gP Push"
map <leader>gm <Action>(VcsGroups)
let g:WhichKeyDesc_git_menu = "<leader>gm Menu"
map <leader>gf <Action>(Git.Fetch)
let g:WhichKeyDesc_git_fetch = "<leader>gf Fetch"
map <leader>ga <Action>(Annotate)
let g:WhichKeyDesc_git_annotate = "<leader>ga Annotate"
map <leader>gl <Action>(ActivateVersionControlToolWindow)
let g:WhichKeyDesc_git_log = "<leader>gl Log"
map <leader>gt <Action>(ActivateCommitToolWindow)
let g:WhichKeyDesc_git_tool = "<leader>gt Tool"

" built-in navigation to navigated items works better
nnoremap <c-o> :action Back<cr>
nnoremap <c-i> :action Forward<cr>
" but preserve ideavim defaults
nnoremap g<c-o> <c-o>
nnoremap g<c-i> <c-i>
" unimpaired mappings
nnoremap [<space> O<esc>j
nnoremap ]<space> o<esc>k
nnoremap [q :action PreviousOccurence<cr>
nnoremap ]q :action NextOccurence<cr>
nnoremap [m :action MethodUp<cr>
nnoremap ]m :action MethodDown<cr>
nnoremap [c :action VcsShowPrevChangeMarker<cr>
nnoremap ]c :action VcsShowNextChangeMarker<cr>


" easy window navigation
nnoremap <c-l> <c-w>l
nnoremap <c-j> <c-w>j
nnoremap <c-h> <c-w>h
nnoremap <c-k> <c-w>k
nnoremap <a-h> gT
nnoremap <a-l> gt
